{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"For Developers","text":""},{"location":"#about-this-page","title":"About This Page","text":"<p>This page is meant for any developer who wants to set up this project on their machine in order to develop or to test something. If you are the end-user of this package and want to use the package directly as an asset, please visit Home to know on the installation instructions.</p>"},{"location":"#cloning-the-repo","title":"Cloning The Repo \ud83d\udd11","text":"<ul> <li> <p>This project is available at a GitHub Repo called as pyconceptlibraryclient.</p> </li> <li> <p>To clone the repo - You can either use your IDE specific Git GUI interface or you can use that boring Terminal of yours.</p> <ul> <li> <p>If you are using your IDE specific Git GUI, please refer to the IDE's docs for reference. I was using VScode for my development purposes, hence you can find some help for it, here.</p> </li> <li> <p>If you are using the terminal, please go to the desired folder in your machine where you want to have this project set up. Once you are there, please run the following command :     <pre><code>git clone https://github.com/SwanseaUniversityMedical/pyconceptlibraryclient.git\n</code></pre></p> </li> </ul> </li> <li> <p>Once cloned successfully, open the project in your IDE.</p> </li> </ul>"},{"location":"#spinning-up-the-development-environment","title":"Spinning up the Development Environment \ud83d\udee0\ufe0f","text":"<ul> <li> <p>This python project uses Poetry for dependency and package management. You will see <code>pyproject.toml</code> file in this project which consists of the information about this project (name, version, dependencies, etc).</p> </li> <li> <p>To start off, please type this command in the terminal (in your project root directory, obviously):     <pre><code>poetry install\n</code></pre></p> </li> <li> <p>This command will install all the dependencies that are listed in the <code>pyproject.toml</code> file. </p> </li> <li> <p>To start off running any script, we have to run the following command in the terminal:     <pre><code>poetry shell\n</code></pre></p> </li> <li> <p>This will spawn up a virtual environment for your project (uses Python 3.11 as per <code>pyproject.toml</code> file of this project), which you can use for carrying out your development chores.</p> </li> <li> <p>I wanna know more about Poetry</p> </li> <li> <p>And this is pretty much it \ud83e\udd78 Go create history now!</p> </li> </ul>"},{"location":"#project-structure","title":"Project Structure \ud83c\udf81","text":"<ul> <li> <p><code>.github</code>: This folder consists of our github workflows. You may add your own as per your needs.</p> </li> <li> <p><code>.venv</code>: This folder is generated by Poetry after running <code>poetry install</code>.</p> </li> <li> <p><code>docs</code>: This folder consists of the <code>.md</code> files generated by Mkdocs. More on this somewhere below.</p> </li> <li> <p><code>test</code>: Should consist of the test files. If not, you are welcome to add any unit tests. But I think, you might want to add pytest before you run your tests.  (Tip: Run <code>poetry add pytest</code>)</p> </li> <li> <p><code>pyconceptlibraryclient</code>: Meat and Starting point of this project. Here, you will find the code concerning the interaction with the API server and handling the response.</p> </li> </ul>"},{"location":"#building-the-package","title":"Building the Package \ud83d\udcbd","text":"<ul> <li>Poetry got you covered here as well \ud83d\udc7d Just run the following command in your terminal:     <pre><code>poetry build\n</code></pre></li> <li> <p>This will generate a <code>dist</code> folder in your project root directory. It should consists of two entities with <code>.whl</code> and <code>.tar.gz</code> extension.</p> </li> <li> <p>The entity with <code>.tar.gz</code> is basically your package that you will publish to either your GitHub Release Notes or to PyPI. </p> </li> <li> <p>In our team, we are not publishing to PyPI. We are just using Github for our internal use.</p> </li> </ul>"},{"location":"#updating-this-doc-website","title":"Updating this doc website \ud83d\udda8\ufe0f","text":"<ul> <li> <p>The first thing is to keep in mind that docs are automatically generated from the docstrings of the methods inside the <code>main</code> folder of the package; thanks to Mkdocs.</p> </li> <li> <p>Just update the docstrings, and the content should be updated.</p> </li> <li> <p>Let's say you updated a few docstrings, now what? Run the following commands as given below (given that you are inside your virtual env, obviously):     <pre><code>mkdocs build\n</code></pre> <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Just open your localhost if commands above, don't throw any error.</p> </li> <li> <p>I still need help on configuration.</p> </li> </ul>"},{"location":"#recommended-practices-to-follow","title":"Recommended Practices to Follow \ud83d\udc40","text":"<ol> <li> <p>Please raise a pull request with proper naming as exemplified below:</p> <ul> <li><code>feature</code><code>/&lt;your-feature-in-short&gt;</code>: If you are contributing anything new.</li> <li><code>hotfix</code><code>/&lt;argh-this-silly-mistake&gt;</code>: If you missed a bracket or a pair here and there.</li> <li><code>bugfix</code><code>/&lt;that-dev-is-having-a-bad-day&gt;</code>: If something significant is breaking the whole project or a significant part of it. </li> </ul> </li> <li> <p>Although, this project has a github hook for formatting the code with Black, BUT its good if things are kept clean and readable.</p> </li> <li> <p>Avoid force pushes as much as possible.</p> </li> <li> <p>Avoid dirty commits - meaning that, commit for a single purpose. Dont put commit message 'changes to A' while having both, A and B changed. Keep segregating your commits, thats a good practice.</p> </li> <li> <p>Avoid too much coffee, sleep well! \ud83d\ude34 </p> </li> </ol> <p>Hope you have fun, Cheers!</p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#pyconceptlibraryclient.client.Client","title":"<code>Client</code>","text":"<p>This package acts as a client for the ConceptLibrary API</p>"},{"location":"client/#pyconceptlibraryclient.client.Client--examples","title":"Examples:","text":""},{"location":"client/#pyconceptlibraryclient.client.Client--authentication","title":"Authentication","text":""},{"location":"client/#pyconceptlibraryclient.client.Client--public-api","title":"Public API","text":"<pre><code>from pyconceptlibraryclient import Client\nclient = Client(public=True)\n</code></pre>"},{"location":"client/#pyconceptlibraryclient.client.Client--authenticated-api-terminal-requests-credentials","title":"Authenticated API (terminal requests credentials)","text":"<pre><code>from pyconceptlibraryclient import Client\nclient = Client(public=False)\n</code></pre>"},{"location":"client/#pyconceptlibraryclient.client.Client--authenticated-api-providing-credentials","title":"Authenticated API (providing credentials)","text":"<pre><code>from pyconceptlibraryclient import Client\nclient = Client(username='my-username', password='my-password')\n</code></pre>"},{"location":"client/#pyconceptlibraryclient.client.Client--providing-a-different-url","title":"Providing a different URL","text":""},{"location":"client/#pyconceptlibraryclient.client.Client--using-built-in-domains","title":"Using built-in domains","text":"<pre><code>from pyconceptlibraryclient import Client, DOMAINS\nclient = Client(public=False, url=DOMAINS.HDRUK)\n</code></pre>"},{"location":"client/#pyconceptlibraryclient.client.Client--using-a-custom-url","title":"Using a custom URL","text":"<pre><code>from pyconceptlibraryclient import Client\nclient = Client(public=False, url='my-custom-url')\n</code></pre>"},{"location":"client/#pyconceptlibraryclient.client.Client-attributes","title":"Attributes","text":""},{"location":"client/#pyconceptlibraryclient.client.Client.collections","title":"<code>collections</code>  <code>property</code>","text":"<p>Entrypoint for collections through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.concepts","title":"<code>concepts</code>  <code>property</code>","text":"<p>Entrypoint for concepts through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.datasources","title":"<code>datasources</code>  <code>property</code>","text":"<p>Entrypoint for datasources through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.ontology","title":"<code>ontology</code>  <code>property</code>","text":"<p>Entrypoint for ontology through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.phenotypes","title":"<code>phenotypes</code>  <code>property</code>","text":"<p>Entrypoint for phenotypes through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.tags","title":"<code>tags</code>  <code>property</code>","text":"<p>Entrypoint for tags through the client instance</p>"},{"location":"client/#pyconceptlibraryclient.client.Client.templates","title":"<code>templates</code>  <code>property</code>","text":"<p>Entrypoint for templates through the client instance</p>"},{"location":"collections/","title":"Collections","text":""},{"location":"collections/#pyconceptlibraryclient.collections.Collections","title":"<code>Collections</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries collections/ endpoints</p>"},{"location":"collections/#pyconceptlibraryclient.collections.Collections-functions","title":"Functions","text":""},{"location":"collections/#pyconceptlibraryclient.collections.Collections.get","title":"<code>get()</code>","text":"<p>Queries collections/</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>A list containing all the collections present in the database</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.collections.get()\n</code></pre>"},{"location":"collections/#pyconceptlibraryclient.collections.Collections.get_detail","title":"<code>get_detail(id)</code>","text":"<p>Queries collections/{id}/detail/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Collection ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried collection</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.collections.get_detail(1)\n</code></pre>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts","title":"<code>Concepts</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries concepts/ endpoints</p>"},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts-functions","title":"Functions","text":""},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts.get","title":"<code>get(**kwargs)</code>","text":"<p>Queries concepts/, with optional query parameters</p> NOTE <ul> <li>See the following URL for more information on query parameters: https://conceptlibrary.saildatabank.com/api/v1/#operations-tag-concepts</li> </ul> <p>Other Parameters:</p> Name Type Description <code>search</code> <code>string</code> <p>Keyword search</p> <code>collections</code> <code>list</code> <p>IDs of collections</p> <code>tags</code> <code>list</code> <p>IDs of tags</p> <code>datasources</code> <code>list</code> <p>IDs of datasources</p> <p>Response (dict|list):   - If paginated: a dict of concepts matching query parameters   - If unpaginated: a list of concepts matching query parameters</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get all concepts (defaults to paginated)\n&gt;&gt;&gt; client.concepts.get()\n</code></pre> <pre><code>&gt;&gt;&gt; # [NOTE: not recommended!] Get unpaginated list of concepts\n&gt;&gt;&gt; client.concepts.get(no_pagination=True)\n</code></pre> <pre><code>&gt;&gt;&gt; # Search concepts\n&gt;&gt;&gt; client.concepts.get(search='asthma', collections=19)\n</code></pre>"},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts.get_codelist","title":"<code>get_codelist(id, version_id=None)</code>","text":"<p>Queries concepts/{id}/export/codes/ or  concepts/{id}/version/{version_id}/export/codes if version_id is supplied</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format C[\\d+]</p> required <code>version_id</code> <code>int</code> <p>version ID of entity</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Codelist of queried concept</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of phenotype, PH1\n&gt;&gt;&gt; client.concepts.get_codelist('PH1')\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of version 2 of phenotype, PH1\n&gt;&gt;&gt; client.concepts.get_codelist('PH1', version_id=2)\n</code></pre>"},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts.get_detail","title":"<code>get_detail(id, version_id=None)</code>","text":"<p>Queries concepts/{id}/detail/ or concepts/{id}/version/{version_id}/detail if  version_id is supplied</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format C[\\d+]</p> required <code>version_id</code> <code>int</code> <p>version ID of entity</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried concept</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of phenotype, PH1\n&gt;&gt;&gt; client.concepts.get_detail('PH1')\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of version 2 of phenotype, PH1\n&gt;&gt;&gt; client.concepts.get_detail('PH1', version_id=2)\n</code></pre>"},{"location":"concepts/#pyconceptlibraryclient.concepts.Concepts.get_versions","title":"<code>get_versions(id)</code>","text":"<p>Queries concepts/{id}/get-versions/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format C[\\d+]</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Version list of queried concept</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.concepts.get_versions('PH1')\n</code></pre>"},{"location":"datasources/","title":"DataSources","text":""},{"location":"datasources/#pyconceptlibraryclient.datasources.Datasources","title":"<code>Datasources</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries datasources/ endpoints</p>"},{"location":"datasources/#pyconceptlibraryclient.datasources.Datasources-functions","title":"Functions","text":""},{"location":"datasources/#pyconceptlibraryclient.datasources.Datasources.get","title":"<code>get()</code>","text":"<p>Queries datasources/</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>A list containing all the datasources present in the database</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.datasources.get()\n</code></pre>"},{"location":"datasources/#pyconceptlibraryclient.datasources.Datasources.get_detail","title":"<code>get_detail(id)</code>","text":"<p>Queries datasources/{id}/detail/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Datasource ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried datasource</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.datasources.get_detail(1)\n</code></pre>"},{"location":"domains/","title":"Domains","text":""},{"location":"domains/#pyconceptlibraryclient.constants.DOMAINS","title":"<code>DOMAINS</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> List of common ConceptLibrary domains <ul> <li>SAIL: https://conceptlibrary.saildatabank.com/</li> <li>HDRUK: https://phenotypes.healthdatagateway.org/</li> <li>ADP: https://conceptlibrary.saildatabank.com/ADP/</li> <li>GATEWAY: http://conceptlibrary.serp.ac.uk/</li> <li>DEMO: https://conceptlibrary.demo-dev.saildatabank.com/</li> <li>LOCAL: http://127.0.0.1:8000/</li> </ul>"},{"location":"ontology/","title":"Ontology","text":""},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology","title":"<code>Ontology</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries ontology/ endpoints</p>"},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology-functions","title":"Functions","text":""},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology.get","title":"<code>get(**kwargs)</code>","text":"<p>Queries ontology/node/, with optional query parameters</p> NOTE <ul> <li> <p>See the following URL for more information on query parameters: https://conceptlibrary.saildatabank.com/api/v1/#operations-tag-ontology</p> </li> <li> <p>Adding the <code>?exact_codes</code> will match the exact SNOMED code instead of fuzzy matching   the given <code>codes</code> across all related mappings (ICD-9/10, MeSH, OPSC4, ReadCodes etc)</p> </li> </ul> <p>Keyword Args:</p> Param Type Default Desc search <code>string</code> <code>NULL</code> Full-text search codes <code>list</code> <code>NULL</code> Either (a) SNOMED code (see below); or (b) Code ID exact_codes <code>empty</code> <code>NULL</code> apply this parameter if you would like to search for exact codes type_ids <code>list</code> <code>NULL</code> Filter ontology type by ID reference_ids <code>list</code> <code>NULL</code> Filter ontology by Atlas reference page <code>number</code> <code>1</code> Page cursor page_size <code>enum</code> <code>1</code> (20 results) Page size enum, where: <code>1</code> = 20, <code>2</code> = 50 &amp; <code>3</code> = 100 rows <p>Returns:</p> Name Type Description <code>Response</code> <code>dict | list</code> <ul> <li>If paginated: a dict of ontological nodes matching query parameters</li> <li>If unpaginated: a list of ontological nodes matching query parameters</li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get all ontological term(s) (nodes; defaults to paginated)\n&gt;&gt;&gt; client.ontology.get()\n</code></pre> <pre><code>&gt;&gt;&gt; # Search ontological terms (apply '?exact_codes' parameter to search only SNOMED codes)\n&gt;&gt;&gt; client.ontology.get(search='dementia', codes='281004,569.82')\n</code></pre>"},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology.get_detail","title":"<code>get_detail(id)</code>","text":"<p>Queries ontology/node/{id}/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Ontology node ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Details of queried ontology</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.ontology.get_detail(1)\n</code></pre>"},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology.get_group_detail","title":"<code>get_group_detail(id)</code>","text":"<p>Queries ontology/type/{id}/; gets an ontology group's detail</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Ontological ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>dict</code> <p>Details of the queried ontology group</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.ontology.get_group_detail(1)\n</code></pre>"},{"location":"ontology/#pyconceptlibraryclient.ontology.Ontology.get_groups","title":"<code>get_groups()</code>","text":"<p>Queries ontology/; gets list of all ontological groups (types)</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of the ontology groups</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.ontology.get_detail(1)\n</code></pre>"},{"location":"phenotypes/","title":"Phenotypes","text":""},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes","title":"<code>Phenotypes</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries phenotypes/ endpoints</p>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes-functions","title":"Functions","text":""},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.get","title":"<code>get(**kwargs)</code>","text":"<p>Queries phenotypes/, with optional query parameters</p> NOTE <ul> <li>See the following URL for more information on query parameters: https://conceptlibrary.saildatabank.com/api/v1/#operations-tag-phenotypes</li> </ul> <p>Other Parameters:</p> Name Type Description <code>search</code> <code>string</code> <p>Keyword search</p> <code>collections</code> <code>list</code> <p>IDs of collections</p> <code>tags</code> <code>list</code> <p>IDs of tags</p> <code>datasources</code> <code>list</code> <p>IDs of datasources</p> <p>Response (dict|list):   - If paginated: a dict of phenotypes matching query parameters   - If unpaginated: a list of phenotypes matching query parameters</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get all phenotypes (defaults to paginated)\n&gt;&gt;&gt; client.phenotypes.get()\n</code></pre> <pre><code>&gt;&gt;&gt; # [NOTE: not recommended!] Get unpaginated list of phenotypes\n&gt;&gt;&gt; client.phenotypes.get(no_pagination=True)\n</code></pre> <pre><code>&gt;&gt;&gt; # Search phenotypes\n&gt;&gt;&gt; client.phenotypes.get(search='asthma', collections=19)\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.get_versions","title":"<code>get_versions(id)</code>","text":"<p>Queries phenotypes/{id}/get-versions/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format PH[\\d+]</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Version list of queried phenotype</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.phenotypes.get_versions('PH1')\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.get_detail","title":"<code>get_detail(id, version_id=None)</code>","text":"<p>Queries phenotypes/{id}/detail/ or phenotypes/{id}/version/{version_id}/detail if  version_id is supplied</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format PH[\\d+]</p> required <code>version_id</code> <code>int</code> <p>version ID of entity</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried phenotype</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.get_detail('PH1')\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of version 2 of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.get_detail('PH1', version_id=2)\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.get_codelist","title":"<code>get_codelist(id, version_id=None)</code>","text":"<p>Queries phenotypes/{id}/export/codes/ or  phenotypes/{id}/version/{version_id}/export/codes if version_id is supplied</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>ID of entity to query, in format PH[\\d+]</p> required <code>version_id</code> <code>int</code> <p>version ID of entity</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Codelist of queried phenotype</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.get_codelist('PH1')\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of version 2 of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.get_codelist('PH1', version_id=2)\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.save_definition_file","title":"<code>save_definition_file(path, id, version_id=None)</code>","text":"<p>Saves the YAML definition of the queried phenotype to file</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Location to save the YAML file</p> required <code>id</code> <code>str</code> <p>ID of entity to query, in format PH[\\d+]</p> required <code>version_id</code> <code>int</code> <p>version ID of entity</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.save_definition_file('./path/to/file.yaml', 'PH1')\n</code></pre> <pre><code>&gt;&gt;&gt; # Get codelist of version 2 of phenotype, PH1\n&gt;&gt;&gt; client.phenotypes.save_definition_file('./path/to/file.yaml', 'PH1', version_id=2)\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.create","title":"<code>create(path)</code>","text":"<p>Uploads the specified phenotype definition file to the ConceptLibrary and creates a new phenotype</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Location where the definition file is saved on your local machine</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of the newly created phenotype</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.phenotypes.create('./path/to/file.yaml')\n</code></pre>"},{"location":"phenotypes/#pyconceptlibraryclient.phenotypes.Phenotypes.update","title":"<code>update(path)</code>","text":"<p>Uses the specified phenotype definition file to update an already existing phenotype</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Location where the definition file is saved on your local machine</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of the updated phenotype</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyconceptlibraryclient import Client\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.phenotypes.create('./path/to/file.yaml')\n</code></pre>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#pyconceptlibraryclient.tags.Tags","title":"<code>Tags</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries tags/ endpoints</p>"},{"location":"tags/#pyconceptlibraryclient.tags.Tags-functions","title":"Functions","text":""},{"location":"tags/#pyconceptlibraryclient.tags.Tags.get","title":"<code>get()</code>","text":"<p>Queries tags/</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>A list containing all the tags present in the database</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.tags.get()\n</code></pre>"},{"location":"tags/#pyconceptlibraryclient.tags.Tags.get_detail","title":"<code>get_detail(id)</code>","text":"<p>Queries tags/{id}/detail/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Tag ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried tags</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.tags.get_detail(1)\n</code></pre>"},{"location":"templates/","title":"Templates","text":""},{"location":"templates/#pyconceptlibraryclient.templates.Templates","title":"<code>Templates</code>","text":"<p>               Bases: <code>Endpoint</code></p> <p>Queries templates/ endpoints</p>"},{"location":"templates/#pyconceptlibraryclient.templates.Templates-functions","title":"Functions","text":""},{"location":"templates/#pyconceptlibraryclient.templates.Templates.get","title":"<code>get()</code>","text":"<p>Queries templates/</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>A list containing all the templates present in the database</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.templates.get()\n</code></pre>"},{"location":"templates/#pyconceptlibraryclient.templates.Templates.get_detail","title":"<code>get_detail(id, version_id=None)</code>","text":"<p>Queries templates/{id}/detail/ or templates/{id}/versions/{version_id}/detail/ if version_id is supplied</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Template ID</p> required <code>version_id</code> <code>int</code> <p>Version ID</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Details of queried template</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of a template\n&gt;&gt;&gt; client.templates.get_detail(1)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get detail of a template with specific version\n&gt;&gt;&gt; client.templates.get_detail(1, version_id=1)\n</code></pre>"},{"location":"templates/#pyconceptlibraryclient.templates.Templates.get_versions","title":"<code>get_versions(id)</code>","text":"<p>Queries templates/{id}/get-versions/</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Template ID</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>list</code> <p>Version list of queried template</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pyconceptlibraryclient\n&gt;&gt;&gt; client = Client(public=False)\n&gt;&gt;&gt; client.templates.get_versions(1)\n</code></pre>"}]}